{"version":3,"file":"static/js/808.e7c3129a.chunk.js","mappings":"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","sources":["geminiConfig.js","PerformanceTrendView.js"],"sourcesContent":["// IMPORTANTE: Mai hardcodare chiavi API nel codice sorgente!\n// La chiave API deve essere sempre gestita tramite variabili d'ambiente\nexport const GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY || 'AIzaSyDrAMa3wyG_9BanK8E7t-8DAWiVGWSLYGA';\nexport const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';\n\nexport const getGeminiRequestConfig = (prompt) => {\n  return {\n    contents: [\n      {\n        parts: [\n          {\n            text: prompt\n          }\n        ]\n      }\n    ],\n    generationConfig: {\n      temperature: 0.9,\n      topK: 40,\n      topP: 0.95,\n      maxOutputTokens: 4096\n    }\n  };\n};\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Share2, RefreshCw, Copy, ExternalLink } from 'lucide-react';\nimport axios from 'axios';\nimport ReactMarkdown from 'react-markdown';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\nimport { \n  GEMINI_API_URL, \n  GEMINI_API_KEY, \n  getGeminiRequestConfig \n} from './geminiConfig';\n\n// Styled components (invariati)\n\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst BackRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n`;\n\nconst BackButton = styled.button`\n  background-color: #E0E7FF;\n  color: #4B5563;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 16px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #C7D2FE;\n  }\n`;\n\nconst ShareButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 16px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.div`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-wrap;\n`;\n\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 24px;\n`;\n\nconst Button = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 16px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-top: 16px;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n\n  &:disabled {\n    background-color: #93C5FD;\n    cursor: not-allowed;\n  }\n`;\n\nconst LoadingSpinner = styled.div`\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  border: 3px solid rgba(255,255,255,.3);\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 1s ease-in-out infinite;\n  \n  @keyframes spin {\n    to { transform: rotate(360deg); }\n  }\n`;\n\nconst MarkdownContent = styled.div`\n  font-size: 16px;\n  line-height: 1.6;\n  color: #4B5563;\n\n  h1 {\n    font-size: 24px;\n    font-weight: 700;\n    margin-top: 24px;\n    margin-bottom: 16px;\n    color: #1F2937;\n  }\n\n  h2 {\n    font-size: 20px;\n    font-weight: 600;\n    margin-top: 20px;\n    margin-bottom: 12px;\n    color: #1F2937;\n  }\n\n  h3 {\n    font-size: 18px;\n    font-weight: 600;\n    margin-top: 16px;\n    margin-bottom: 8px;\n    color: #1F2937;\n  }\n\n  p {\n    margin-bottom: 16px;\n  }\n\n  ul, ol {\n    margin-bottom: 16px;\n    padding-left: 24px;\n  }\n\n  li {\n    margin-bottom: 8px;\n  }\n\n  strong {\n    font-weight: 600;\n    color: #1F2937;\n  }\n\n  em {\n    font-style: italic;\n  }\n\n  a {\n    color: #3B82F6;\n    text-decoration: underline;\n  }\n\n  blockquote {\n    border-left: 4px solid #E5E7EB;\n    padding-left: 16px;\n    margin-left: 0;\n    margin-right: 0;\n    font-style: italic;\n    color: #6B7280;\n  }\n\n  code {\n    font-family: monospace;\n    background-color: #F3F4F6;\n    padding: 2px 4px;\n    border-radius: 4px;\n    font-size: 14px;\n  }\n\n  hr {\n    border: 0;\n    height: 1px;\n    background-color: #E5E7EB;\n    margin: 24px 0;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(Math.round(num));\n\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\n// Funzione per il delay nel retry con backoff esponenziale\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Nuova funzione per l'API Gemini con retry logic\nconst fetchGeminiAnalysis = async (prompt, maxRetries = 3) => {\n  // Se non è stata configurata la chiave API, mostra un errore\n  if (GEMINI_API_KEY === 'LA_TUA_CHIAVE_API') {\n    return `# ⚠️ Configurazione API Gemini richiesta\n\nPer utilizzare questa funzionalità, è necessario configurare una chiave API Gemini valida.\n\n## Istruzioni per la configurazione:\n\n1. Ottieni una chiave API da [Google AI Studio](https://makersuite.google.com/app/apikey)\n2. Apri il file \\`src/geminiConfig.js\\`\n3. Sostituisci \\`LA_TUA_CHIAVE_API\\` con la tua chiave API\n4. Salva il file e riavvia l'applicazione`;\n  }\n\n  let lastError;\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      // Crea la configurazione completa della richiesta\n      const requestConfig = getGeminiRequestConfig(prompt);\n      \n      // Effettua la chiamata API con timeout\n      const response = await axios.post(\n        `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, \n        requestConfig,\n        {\n          timeout: 30000, // Timeout di 30 secondi\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        }\n      );\n      \n      // Estrai e restituisci il testo generato\n      return response.data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error(`Errore nella chiamata API Gemini (tentativo ${attempt + 1}/${maxRetries}):`, error);\n      lastError = error;\n      \n      // Gestisci gli errori comuni\n      if (error.response) {\n        // Errori di autenticazione - non ritentare\n        if (error.response.status === 401) {\n          return \"# ⚠️ Errore di autenticazione\\n\\nLa chiave API Gemini non è valida. Verifica la tua chiave in `src/geminiConfig.js`.\";\n        }\n        \n        // Errori di quota o limiti - ritenta con backoff esponenziale\n        if (error.response.status === 429) {\n          if (attempt < maxRetries - 1) {\n            const retryDelay = Math.pow(2, attempt) * 1000 + Math.random() * 1000; // 1s, 2s, 4s con jitter\n            console.log(`Rate limit raggiunto. Ritento tra ${Math.round(retryDelay / 1000)} secondi...`);\n            await delay(retryDelay);\n            continue;\n          } else {\n            return `# ⚠️ Limite di richieste persistente\n\nHai superato il limite di richieste per la tua chiave API Gemini dopo ${maxRetries} tentativi.\n\n## Cosa puoi fare:\n\n1. **Attendi**: I limiti si resetteranno automaticamente (solitamente entro 1 ora)\n2. **Verifica la quota**: Controlla la tua quota API su [Google AI Studio](https://makersuite.google.com/app/apikey)\n3. **Upgrade**: Considera l'aggiornamento a un piano con limiti più elevati\n4. **Riduci le chiamate**: Usa la cache o riduci la frequenza delle richieste\n\nLa prossima volta che generi l'analisi, dovrebbe funzionare se i limiti si sono resettati.`;\n          }\n        }\n        \n        // Errori del server (5xx) - ritenta\n        if (error.response.status >= 500 && error.response.status < 600) {\n          if (attempt < maxRetries - 1) {\n            const retryDelay = Math.pow(2, attempt) * 1000;\n            console.log(`Errore del server. Ritento tra ${Math.round(retryDelay / 1000)} secondi...`);\n            await delay(retryDelay);\n            continue;\n          }\n        }\n        \n        // Altri errori HTTP - non ritentare\n        return `# ⚠️ Errore nella chiamata API\n\nSi è verificato un errore (${error.response.status}) durante la chiamata all'API Gemini.\n\n**Dettagli**: ${error.response.data.error?.message || 'Errore sconosciuto'}\n\n**Suggerimenti**:\n- Controlla la validità della chiave API\n- Verifica la tua connessione internet\n- Riprova tra qualche minuto`;\n      }\n      \n      // Errori di rete - ritenta\n      if (error.code === 'ECONNABORTED' || error.code === 'ENOTFOUND' || error.message.includes('timeout')) {\n        if (attempt < maxRetries - 1) {\n          const retryDelay = Math.pow(2, attempt) * 1000;\n          console.log(`Errore di rete. Ritento tra ${Math.round(retryDelay / 1000)} secondi...`);\n          await delay(retryDelay);\n          continue;\n        }\n      }\n      \n      // Per altri tipi di errore, non ritentare\n      break;\n    }\n  }\n  \n  // Se tutti i tentativi sono falliti, restituisci l'ultimo errore\n  return `# ⚠️ Errore di connessione\n\nNon è stato possibile contattare l'API Gemini dopo ${maxRetries} tentativi.\n\n**Possibili cause**:\n- Problemi di connessione internet\n- Server API temporaneamente non disponibile\n- Limiti di rate raggiunti\n\n**Cosa fare**:\n- Controlla la tua connessione internet\n- Riprova tra qualche minuto\n- Se il problema persiste, potrebbe essere un'interruzione temporanea del servizio\n\n**Ultimo errore**: ${lastError?.message || 'Errore sconosciuto'}`;\n};\n\n// Funzione fallback per generare un'analisi simulata quando l'API è in rate limit\nconst generateSimulatedAnalysis = (yearToAnalyze, currentMonth, totalTurni, averageMonthlyTurni) => {\n  const month = currentMonth > 1 ? currentMonth - 1 : 12;\n  const currentDate = new Date();\n  const formatDate = (date) => {\n    return date.toLocaleDateString('it-IT', { \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    });\n  };\n  \n  return `# REPORT STRATEGICO SULL'ANDAMENTO DEI TURNI DI DOPPIAGGIO\n## Data generazione: ${formatDate(currentDate)}\n\n> ⚠️ **Nota**: Questa è un'analisi simulata generata localmente perché l'API Gemini non è attualmente disponibile a causa di limiti di utilizzo.\n\n## Riepilogo Esecutivo\nL'analisi dei dati di performance fino a ${getMonthName(month)} ${yearToAnalyze} mostra una tendenza complessivamente positiva rispetto agli anni precedenti. La produttività, misurata in turni di lavoro (${totalTurni} turni totali), evidenzia un andamento stagionale con picchi nel periodo primaverile e autunnale.\n\n## Confronto con Gli Anni Precedenti\nIl totale dei turni completati finora (${totalTurni}) con una media mensile di ${averageMonthlyTurni.toFixed(2)} turni rappresenta un buon risultato rispetto agli anni precedenti.\n\n## Tendenze Stagionali\nL'analisi trimestrale rivela un pattern coerente con gli anni precedenti, con le seguenti caratteristiche:\n- Primo trimestre: Performance in linea con le aspettative\n- Secondo trimestre: Picco di produttività \n- Terzo trimestre: Stabilizzazione dei valori\n\n## Previsioni per il Resto dell'Anno\nBasandoci sui pattern osservati, ci aspettiamo che la produttività totale dell'anno si attesti intorno ai ${Math.round(totalTurni * 12 / month)} turni, assumendo che il trend attuale continui.\n\n## Raccomandazioni\nPer ottimizzare ulteriormente la performance, suggeriamo di:\n1. Pianificare un incremento strategico della capacità produttiva nei mesi tipicamente più deboli\n2. Valutare l'efficienza operativa dei turni nei periodi di picco\n3. Considerare l'espansione delle risorse nei periodi di maggiore domanda\n\n## Nota Tecnica\nPer utilizzare l'analisi AI reale:\n1. Attendi che i limiti di richieste Gemini si azzerino (solitamente dopo alcune ore)\n2. Considera l'aggiornamento del tuo piano Gemini per limiti più elevati\n3. Implementa strategie di caching per ridurre le chiamate API necessarie\n\n---\n\n*Questa analisi simulata è stata generata localmente. Per analisi più accurate e dettagliate, utilizza la funzionalità AI quando sarà nuovamente disponibile.*`;\n};\n\n// Funzione per pulire la cache vecchia\nconst cleanOldCache = () => {\n  try {\n    const keysToRemove = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith('aiAnalysis_')) {\n        const cachedData = localStorage.getItem(key);\n        if (cachedData) {\n          const parsedData = JSON.parse(cachedData);\n          const now = Date.now();\n          const cachedTime = parsedData.timestamp;\n          \n          // Rimuovi cache più vecchia di 7 giorni\n          if (now - cachedTime > 7 * 24 * 60 * 60 * 1000) {\n            keysToRemove.push(key);\n          }\n        }\n      }\n    }\n    \n    keysToRemove.forEach(key => localStorage.removeItem(key));\n    \n    if (keysToRemove.length > 0) {\n      console.log(`Rimossi ${keysToRemove.length} elementi dalla cache scaduti`);\n    }\n  } catch (error) {\n    console.error(\"Errore nella pulizia della cache:\", error);\n  }\n};\n\n// Funzione per salvare l'analisi in localStorage con metadati migliorati\nconst saveAnalysisToCache = (yearToAnalyze, month, analysis, isRealAnalysis = true) => {\n  const cacheKey = `aiAnalysis_${yearToAnalyze}_${month}`;\n  const cacheData = {\n    timestamp: Date.now(),\n    analysis: analysis,\n    isRealAnalysis: isRealAnalysis, // Distingue tra analisi reale e simulata\n    yearToAnalyze: yearToAnalyze,\n    month: month,\n    version: '1.1' // Versione del formato cache per future migrations\n  };\n  \n  try {\n    localStorage.setItem(cacheKey, JSON.stringify(cacheData));\n    \n    // Pulizia periodica della cache\n    if (Math.random() < 0.1) { // 10% di probabilità\n      cleanOldCache();\n    }\n  } catch (error) {\n    console.error(\"Errore nel salvataggio dell'analisi in cache:\", error);\n    // Se il localStorage è pieno, proviamo a pulire e ritentare\n    if (error.name === 'QuotaExceededError') {\n      try {\n        cleanOldCache();\n        localStorage.setItem(cacheKey, JSON.stringify(cacheData));\n      } catch (retryError) {\n        console.error(\"Errore anche dopo la pulizia della cache:\", retryError);\n      }\n    }\n  }\n};\n\n// Funzione migliorata per recuperare l'analisi dalla cache\nconst getAnalysisFromCache = (yearToAnalyze, month) => {\n  try {\n    const cacheKey = `aiAnalysis_${yearToAnalyze}_${month}`;\n    const cachedData = localStorage.getItem(cacheKey);\n    \n    if (!cachedData) return null;\n    \n    const parsedData = JSON.parse(cachedData);\n    const now = Date.now();\n    const cachedTime = parsedData.timestamp;\n    \n    // Cache più lunga per analisi reali, più breve per simulazioni\n    const maxAge = parsedData.isRealAnalysis \n      ? 7 * 24 * 60 * 60 * 1000  // 7 giorni per analisi reali\n      : 2 * 60 * 60 * 1000;      // 2 ore per analisi simulate\n    \n    if (now - cachedTime > maxAge) {\n      // Cache scaduta, la eliminiamo\n      localStorage.removeItem(cacheKey);\n      return null;\n    }\n    \n    // Aggiungi informazioni di debug\n    console.log(`Cache hit per ${yearToAnalyze}/${month} - Tipo: ${parsedData.isRealAnalysis ? 'Reale' : 'Simulata'}, Età: ${Math.round((now - cachedTime) / (60 * 1000))} minuti`);\n    \n    return parsedData.analysis;\n  } catch (error) {\n    console.error(\"Errore nel recupero dell'analisi dalla cache:\", error);\n    return null;\n  }\n};\n\n// Funzione per ottenere statistiche della cache (utile per debug)\nconst getCacheStats = () => {\n  try {\n    const stats = {\n      totalItems: 0,\n      realAnalysis: 0,\n      simulatedAnalysis: 0,\n      totalSize: 0,\n      oldestItem: null,\n      newestItem: null\n    };\n    \n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith('aiAnalysis_')) {\n        const cachedData = localStorage.getItem(key);\n        if (cachedData) {\n          const parsedData = JSON.parse(cachedData);\n          stats.totalItems++;\n          stats.totalSize += cachedData.length;\n          \n          if (parsedData.isRealAnalysis) {\n            stats.realAnalysis++;\n          } else {\n            stats.simulatedAnalysis++;\n          }\n          \n          if (!stats.oldestItem || parsedData.timestamp < stats.oldestItem) {\n            stats.oldestItem = parsedData.timestamp;\n          }\n          \n          if (!stats.newestItem || parsedData.timestamp > stats.newestItem) {\n            stats.newestItem = parsedData.timestamp;\n          }\n        }\n      }\n    }\n    \n    return stats;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle statistiche della cache:\", error);\n    return null;\n  }\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const [aiAnalysis, setAiAnalysis] = useState('');\n  const [isGeneratingAnalysis, setIsGeneratingAnalysis] = useState(false);\n  const [showDiagnostics, setShowDiagnostics] = useState(false);\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  const generateYearAnalysis = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    \n    const totalTurni = Object.values(currentYearData)\n      .slice(0, month)\n      .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n    \n    const monthsWithData = Object.values(currentYearData)\n      .slice(0, month)\n      .filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    \n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n  \n    const previousYearsData = Object.entries(allYearsData)\n      .filter(([y]) => parseInt(y) < yearToAnalyze && parseInt(y) >= 2021)\n      .map(([year, data]) => {\n        const yearTotal = Object.values(data)\n          .slice(0, month)\n          .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n        return { year: parseInt(year), totalTurni: yearTotal };\n      });\n  \n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n    \n    let analysis = `Considerazioni sull'anno in corso ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    \n    const percentageDiff = ((totalTurni - avgPreviousYears) / avgPreviousYears) * 100;\n    analysis += `Questo rappresenta un ${percentageDiff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentageDiff))}% `;\n    analysis += `rispetto alla media di tutti gli anni precedenti nello stesso periodo. `;\n\n    analysis += `\\n\\nAnalisi stagionale:\\n`;\n    const monthlyTurni = Object.values(currentYearData)\n      .slice(0, month)\n      .map(m => m ? m.totaleTurni : undefined);\n    const quarterlyData = [\n      monthlyTurni.slice(0, 3).filter(m => m !== undefined),\n      monthlyTurni.slice(3, 6).filter(m => m !== undefined),\n      monthlyTurni.slice(6, 9).filter(m => m !== undefined),\n      monthlyTurni.slice(9, 12).filter(m => m !== undefined)\n    ];\n\n    const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n    \n    const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n    quarterlyAverages.forEach((avg, index) => {\n      if (avg !== null) {\n        const percentDiff = ((avg - avgPreviousYears / 12) / (avgPreviousYears / 12)) * 100;\n        analysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n        analysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media degli anni passati.\\n`;\n      }\n    });\n\n    const allYearsTotals = Object.entries(allYearsData)\n      .map(([year, data]) => ({\n        year: parseInt(year),\n        totalTurni: Object.values(data)\n          .slice(0, month)\n          .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0)\n      }))\n      .sort((a, b) => b.totalTurni - a.totalTurni);\n\n    const currentYearRank = allYearsTotals.findIndex(y => y.year === yearToAnalyze) + 1;\n    const totalYears = allYearsTotals.length;\n\n    analysis += `\\nConclusione:\\n`;\n    analysis += `Con le informazioni attuali possiamo determinare che la produttività dell'anno in corso è `;\n    analysis += `${percentageDiff > 0 ? 'superiore' : 'inferiore'} alla media degli anni passati del ${formatNumber(Math.abs(percentageDiff))}%. `;\n    analysis += `Si posiziona al ${currentYearRank}° posto su ${totalYears} nella classifica generale. `;\n    analysis += `Questo posizionamento tiene conto di tutti gli anni disponibili nei dati, `;\n    analysis += `mentre il confronto con la media considera solo il periodo analizzato fino ad ora (${getMonthName(month)}). `;\n    \n    if (month < 12) {\n      analysis += `C'è ancora tempo per migliorare la performance complessiva dell'anno.`;\n    }\n\n    return analysis;\n  }, []);\n\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    let analysis = '';\n    const futurePredictions = [];\n    let totalEffectiveTurni = 0;\n    let totalPredictedTurni = 0;\n  \n    for (let i = 0; i < 12; i++) {\n      const monthData = allYearsData[year][i];\n      if (i < month - 1) {\n        totalEffectiveTurni += monthData ? monthData.totaleTurni : 0;\n      } else {\n        let totalTurni = 0;\n        let yearsCount = 0;\n        availableYears.forEach(y => {\n          if (y !== 2020 && y !== year) {\n            const yearData = allYearsData[y];\n            if (yearData && yearData[i] && yearData[i].totaleTurni > 0) {\n              totalTurni += yearData[i].totaleTurni;\n              yearsCount++;\n            }\n          }\n        });\n        if (yearsCount > 0) {\n          const averageTurni = Math.round(totalTurni / yearsCount);\n          totalPredictedTurni += averageTurni;\n          futurePredictions.push(`• ${getMonthName(i + 1)}: ${formatNumber(averageTurni)} turni`);\n        }\n      }\n    }\n  \n    const totalComplessivo = totalEffectiveTurni + totalPredictedTurni;\n  \n    const productivityRanking = availableYears\n      .map(y => {\n        if (y === year) {\n          return { year: y, totalTurni: totalComplessivo };\n        } else {\n          const yearTotalTurni = Object.values(allYearsData[y]).reduce((sum, month) => sum + (month ? month.totaleTurni : 0), 0);\n          return { year: y, totalTurni: yearTotalTurni };\n        }\n      })\n      .sort((a, b) => b.totalTurni - a.totalTurni);\n  \n    analysis += `Turni effettivi (fino a ${getMonthName(month - 1)}): ${formatNumber(totalEffectiveTurni)}\\n`;\n    analysis += `Turni previsti (da ${getMonthName(month)} a Dicembre): ${formatNumber(totalPredictedTurni)}\\n`;\n    analysis += `Totale complessivo stimato per l'anno ${year}: ${formatNumber(totalComplessivo)}\\n\\n`;\n  \n    analysis += `Previsione per i mesi rimanenti (in base alla media degli anni precedenti):\\n${futurePredictions.join('\\n')}\\n\\n`;\n  \n    analysis += `Classifica di produttività (totale turni per anno):\\n`;\n    productivityRanking.forEach((item, index) => {\n      analysis += `${index + 1}. ${item.year}: ${formatNumber(item.totalTurni)} turni`;\n      if (item.year === year) {\n        analysis += ` (proiezione)`;\n      }\n      analysis += '\\n';\n    });\n  \n    const currentYearRank = productivityRanking.findIndex(item => item.year === year) + 1;\n    analysis += `\\nL'anno ${year} si posiziona attualmente al ${currentYearRank}° posto nella classifica di produttività.`;\n    \n    if (currentYearRank === 1) {\n      analysis += ` Questo suggerisce un anno particolarmente produttivo, potenzialmente superando i risultati degli anni precedenti.`;\n    } else if (currentYearRank <= 3) {\n      analysis += ` Questa è una performance solida, indicando un anno di buona produttività.`;\n    } else {\n      analysis += ` C'è potenziale per migliorare la produttività nei mesi rimanenti per salire nella classifica.`;\n    }\n  \n    return analysis;\n  }, [availableYears]);\n\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    \n    const calculateAverageForMonth = (month) => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n  \n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month + 1) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n\n  const generateAIAnalysis = async (forceUpdate = false) => {\n    setIsGeneratingAnalysis(true);\n    \n    try {\n      // Prepara i dati per l'API Gemini\n      const year = currentYear;\n      const month = currentMonth > 1 ? currentMonth - 1 : 12;\n      const yearToAnalyze = month === 12 ? year - 1 : year;\n      const currentYearData = allYearsData[yearToAnalyze] || {};\n      \n      // Controlla se esiste un'analisi in cache (solo se non è richiesto un aggiornamento forzato)\n      if (!forceUpdate) {\n        const cachedAnalysis = getAnalysisFromCache(yearToAnalyze, month);\n        if (cachedAnalysis) {\n          setAiAnalysis(cachedAnalysis);\n          setIsGeneratingAnalysis(false);\n          return;\n        }\n      }\n      \n      // Se non c'è cache o è richiesto un aggiornamento forzato, procedi con l'analisi\n      \n      // Calcola statistiche chiave per i dati correnti\n      const totalTurni = Object.values(currentYearData)\n        .slice(0, month)\n        .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n      \n      const monthsWithData = Object.values(currentYearData)\n        .slice(0, month)\n        .filter(monthData => monthData && monthData.totaleTurni > 0).length;\n      \n      const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n    \n      // Raccoglie dati degli anni precedenti per calcolare le medie storiche per ogni mese\n      const previousYearsData = Object.entries(allYearsData)\n        .filter(([y]) => parseInt(y) < yearToAnalyze && parseInt(y) >= 2021);\n      \n      // Calcola le medie storiche per tutti i 12 mesi dell'anno\n      const historicalMonthlyAverages = {};\n      const allMonthsHistoricalData = {};\n      \n      for (let monthIndex = 0; monthIndex < 12; monthIndex++) {\n        const monthNumber = monthIndex + 1;\n        let totalTurniForMonth = 0;\n        let yearsWithDataForMonth = 0;\n        \n        previousYearsData.forEach(([year, data]) => {\n          if (data[monthIndex] && data[monthIndex].totaleTurni) {\n            totalTurniForMonth += data[monthIndex].totaleTurni;\n            yearsWithDataForMonth++;\n          }\n        });\n        \n        const averageForMonth = yearsWithDataForMonth > 0 \n          ? totalTurniForMonth / yearsWithDataForMonth \n          : 0;\n          \n        historicalMonthlyAverages[monthNumber] = averageForMonth;\n        allMonthsHistoricalData[monthNumber] = {\n          monthName: getMonthName(monthNumber),\n          mediaStorica: Math.round(averageForMonth),\n          anniConDati: yearsWithDataForMonth\n        };\n      }\n      \n      // Calcola dati mensili per l'anno in analisi con confronto vs media storica\n      const currentYearMonthlyWithComparison = [];\n      for (let i = 0; i < month; i++) {\n        const monthData = currentYearData[i];\n        const monthNumber = i + 1;\n        const currentMonthTurni = monthData?.totaleTurni || 0;\n        const historicalAverage = historicalMonthlyAverages[monthNumber] || 0;\n        \n        if (currentMonthTurni > 0) {\n          const percentageChange = historicalAverage > 0 \n            ? ((currentMonthTurni - historicalAverage) / historicalAverage * 100)\n            : 0;\n          \n          let performanceDescription = '';\n          if (percentageChange > 15) {\n            performanceDescription = 'Significativamente superiore alla media storica';\n          } else if (percentageChange > 5) {\n            performanceDescription = 'Superiore alla media storica';\n          } else if (percentageChange > -5) {\n            performanceDescription = 'In linea con la media storica';\n          } else if (percentageChange > -15) {\n            performanceDescription = 'Inferiore alla media storica';\n          } else {\n            performanceDescription = 'Significativamente inferiore alla media storica';\n          }\n          \n          currentYearMonthlyWithComparison.push({\n            month: monthNumber,\n            monthName: getMonthName(monthNumber),\n            turniAttuali: currentMonthTurni,\n            mediaStorica: Math.round(historicalAverage),\n            variazione: Math.round(percentageChange * 100) / 100,\n            performance: performanceDescription\n          });\n        }\n      }\n      \n      // Prepara dati storici riassuntivi per contesto\n      const historicalSummary = [];\n      \n      // Aggiungi gli anni precedenti (anni completi)\n      previousYearsData.forEach(([year, data]) => {\n        const yearTotal = Object.values(data)\n          .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n        historicalSummary.push({ \n          year: parseInt(year), \n          totalTurni: yearTotal,\n          note: \"(anno completo)\"\n        });\n      });\n      \n      // Aggiungi l'anno corrente (limitato al mese attuale)\n      const currentYearTotal = Object.values(currentYearData)\n        .slice(0, month)\n        .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n      historicalSummary.push({\n        year: yearToAnalyze,\n        totalTurni: currentYearTotal,\n        note: `(fino a ${getMonthName(month)})`\n      });\n      \n      // Ordina per anno\n      historicalSummary.sort((a, b) => a.year - b.year);\n      \n      // Prepara il prompt per l'API\n      const currentDate = new Date();\n      const formatDate = (date) => {\n        return date.toLocaleDateString('it-IT', { \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        });\n      };\n      \n      const prompt = `\n        Sei un esperto analista di dati del settore audiovisivo con specifiche competenze nel doppiaggio. La tua analisi è richiesta dal board dello Studio Pumaisdue, un prestigioso studio di doppiaggio italiano. Esamina attentamente i seguenti dati sui turni di lavoro e produci un report strategico dettagliato.\n        \n        IMPORTANTE: Il report deve iniziare OBBLIGATORIAMENTE con il titolo esatto:\n        # REPORT STRATEGICO SULL'ANDAMENTO DEI TURNI DI DOPPIAGGIO\n        ## Data generazione: ${formatDate(currentDate)}\n        \n        ===DATI DI BASE===\n        Anno in analisi: ${yearToAnalyze}\n        Mese attuale: ${getMonthName(month)}\n        Turni totali completati fino a ${getMonthName(month)}: ${totalTurni}\n        Media mensile dei turni: ${averageMonthlyTurni.toFixed(2)}\n        \n        ===CONFRONTO MENSILE DETTAGLIATO (${yearToAnalyze} vs Media Storica)===\n        I seguenti dati mostrano il confronto preciso tra i turni dell'anno corrente e le medie storiche calcolate:\n        ${JSON.stringify(currentYearMonthlyWithComparison, null, 2)}\n        \n        ===DATI STORICI RIASSUNTIVI===\n        Totali annuali di tutti gli anni disponibili (per contesto nelle previsioni):\n        NOTA: Gli anni precedenti mostrano i totali completi (12 mesi), l'anno corrente mostra solo i dati fino al mese analizzato.\n        ${JSON.stringify(historicalSummary, null, 2)}\n        \n        ===MEDIE STORICHE MENSILI (TUTTI I 12 MESI)===\n        Le seguenti sono le medie storiche reali calcolate per ogni mese dell'anno basate sui dati degli anni precedenti:\n        ${JSON.stringify(allMonthsHistoricalData, null, 2)}\n        \n        ===ISTRUZIONI SPECIFICHE===\n        IMPORTANTE: \n        1. Usa ESCLUSIVAMENTE i dati del confronto mensile dettagliato sopra riportato per le tue valutazioni di performance dei mesi già trascorsi.\n        2. Per le PREVISIONI dei mesi futuri, usa ESCLUSIVAMENTE le medie storiche mensili fornite nella sezione \"MEDIE STORICHE MENSILI\". NON inventare o ipotizzare valori.\n        3. Ogni mese ha già il calcolo preciso della variazione percentuale e la classificazione della performance rispetto alla media storica.\n        \n        La tua analisi deve essere COMPLETA e APPROFONDITA, includendo:\n        \n        1. **RIEPILOGO ESECUTIVO**: \n           - Panoramica concisa basata sui confronti mensili già calcolati\n           - Sintesi dei punti chiave per il management\n           - Riassunto delle performance mese per mese come riportato nei dati\n        \n        2. **ANALISI COMPARATIVA**: \n           - Utilizza le variazioni percentuali già calcolate per ogni mese\n           - Analizza i trend di crescita/diminuzione basandoti sui dati forniti\n           - Posizionamento dell'anno corrente rispetto alla storia dello studio\n           - Pattern comuni identificabili nei diversi mesi\n        \n        3. **ANALISI STAGIONALE**:\n           - Pattern trimestrali e mensili basati sui confronti forniti\n           - Identificazione di periodi di alta/bassa produttività\n           - Confronto della stagionalità evidenziata dai dati\n        \n        4. **PREVISIONI FUTURE**:\n           - Per i mesi rimanenti dell'anno, usa ESCLUSIVAMENTE i valori delle medie storiche mensili fornite sopra\n           - NON utilizzare valori ipotetici o inventati come \"Luglio: 350, Agosto: 300\" ecc.\n           - Calcola la stima della produttività annuale totale sommando i turni effettivi già realizzati alle medie storiche reali per i mesi mancanti\n           - Specifica chiaramente che le previsioni sono basate sulle medie storiche reali degli anni precedenti\n           - Per il posizionamento rispetto alla storia dello studio, USA ESCLUSIVAMENTE i dati storici riassuntivi forniti che mostrano i totali completi degli anni precedenti\n           - IMPORTANTE: I totali annuali degli anni precedenti nei dati storici riassuntivi sono COMPLETI (12 mesi), quindi usali per confronti accurati\n           - Considerazioni sui fattori che potrebbero influenzare le previsioni\n        \n        5. **RACCOMANDAZIONI STRATEGICHE**:\n           - Strategie basate sui pattern identificati\n           - Suggerimenti per ottimizzare le risorse nei diversi periodi, specificando quando togliere o aggiungere risorse lavorative al team\n           - Indicazioni su quando aumentare o diminuire collaboratori esterni\n        \n        Formatta il tuo report in Markdown con una struttura chiara e professionale. Usa titoli (##), sottotitoli (###), elenchi puntati e, dove appropriato, enfasi (**testo**) per evidenziare concetti chiave. Il linguaggio deve essere professionale ma accessibile, orientato all'azione e specifico per il settore del doppiaggio.\n        \n        Lo studio utilizzerà questo report per decisioni strategiche importanti, quindi sii preciso, obiettivo e basati SOLO sui dati di confronto forniti.\n      `;\n      \n      try {\n        // Chiama l'API Gemini\n        const response = await fetchGeminiAnalysis(prompt);\n        \n        // Verifica se c'è stato un errore (messaggi di errore iniziano con \"# ⚠️\")\n        if (response.includes(\"# ⚠️\")) {\n          // Se c'è stato un errore, genera un'analisi simulata\n          const simulatedAnalysis = generateSimulatedAnalysis(yearToAnalyze, currentMonth, totalTurni, averageMonthlyTurni);\n          setAiAnalysis(simulatedAnalysis);\n          // Salva l'analisi simulata in cache con flag appropriato\n          saveAnalysisToCache(yearToAnalyze, month, simulatedAnalysis, false);\n        } else {\n          // Altrimenti usa la risposta dell'API\n          setAiAnalysis(response);\n          // Salva in cache la risposta reale dell'API\n          saveAnalysisToCache(yearToAnalyze, month, response, true);\n        }\n      } catch (error) {\n        console.error(\"Errore nella chiamata API:\", error);\n        // In caso di errore, genera comunque un'analisi simulata\n        const simulatedAnalysis = generateSimulatedAnalysis(yearToAnalyze, currentMonth, totalTurni, averageMonthlyTurni);\n        setAiAnalysis(simulatedAnalysis);\n        // Salva l'analisi simulata in cache\n        saveAnalysisToCache(yearToAnalyze, month, simulatedAnalysis, false);\n      }\n    } catch (error) {\n      console.error(\"Errore nella preparazione dei dati:\", error);\n      // Definiamo valori di default in caso di errore nella preparazione dei dati\n      const defaultYearToAnalyze = currentYear;\n      const defaultTotalTurni = 0;\n      const defaultAverageMonthlyTurni = 0;\n      const simulatedAnalysis = generateSimulatedAnalysis(defaultYearToAnalyze, currentMonth, defaultTotalTurni, defaultAverageMonthlyTurni);\n      setAiAnalysis(simulatedAnalysis);\n      // Salva l'analisi simulata in cache anche in caso di errori nella preparazione dati\n      const month = currentMonth > 1 ? currentMonth - 1 : 12;\n      saveAnalysisToCache(defaultYearToAnalyze, month, simulatedAnalysis, false);\n    } finally {\n      setIsGeneratingAnalysis(false);\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const allData = {};\n      \n      for (const year of availableYears) {\n        allData[year] = await getYearlyData(year);\n      }\n      \n      setAllYearsData(allData);\n      \n      const analysis = generateYearAnalysis(currentYear, currentMonth, allData, allData);\n      setYearAnalysis(analysis);\n      \n      const futurePrediction = makePrediction(currentYear, currentMonth, allData);\n      setPrediction(futurePrediction);\n    };\n    \n    fetchData();\n  }, [availableYears, currentYear, currentMonth, generateYearAnalysis, makePrediction]);\n\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n\n  // Funzioni per la diagnostica\n  const clearCache = () => {\n    try {\n      const keysToRemove = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith('aiAnalysis_')) {\n          keysToRemove.push(key);\n        }\n      }\n      \n      keysToRemove.forEach(key => localStorage.removeItem(key));\n      \n      alert(`Cache pulita! Rimossi ${keysToRemove.length} elementi.`);\n    } catch (error) {\n      console.error(\"Errore nella pulizia della cache:\", error);\n      alert(\"Errore durante la pulizia della cache.\");\n    }\n  };\n\n  const testApiConnection = async () => {\n    try {\n      const testPrompt = \"Test di connessione API. Rispondi semplicemente con 'OK'.\";\n      const response = await fetchGeminiAnalysis(testPrompt, 1);\n      \n      if (response.includes(\"# ⚠️\")) {\n        alert(\"❌ Test API fallito:\\n\\n\" + response.replace(/[#*]/g, ''));\n      } else {\n        alert(\"✅ Test API riuscito! L'API Gemini è funzionante.\");\n      }\n    } catch (error) {\n      alert(\"❌ Errore nel test API:\\n\\n\" + error.message);\n    }\n  };\n\n\n  const handleShare = () => {\n    const shareText = `Performance Trend ${currentYear}\\n\\n${yearAnalysis}\\n\\n${prediction}`;\n    if (navigator.share) {\n      navigator.share({\n        title: 'Performance Trend',\n        text: shareText,\n      }).catch(console.error);\n    } else {\n      alert(\"La condivisione non è supportata su questo browser. Copia e incolla il testo seguente:\\n\\n\" + shareText);\n    }\n  };\n\n  // Funzione per copiare il report negli appunti\n  const copyReportToClipboard = () => {\n    try {\n      // Recupera solo il testo senza formattazione Markdown\n      const plainText = aiAnalysis.replace(/#{1,6}\\s(.*)/g, '$1\\n')  // Rimuove i simboli # per i titoli\n                               .replace(/\\*\\*(.*?)\\*\\*/g, '$1')      // Rimuove i ** per il grassetto\n                               .replace(/_(.*?)_/g, '$1')            // Rimuove _ per il corsivo\n                               .replace(/\\[(.*?)\\]\\((.*?)\\)/g, '$1 ($2)'); // Converte i link in formato testo\n      \n      navigator.clipboard.writeText(plainText)\n        .then(() => {\n          alert('Report copiato negli appunti!');\n        })\n        .catch(err => {\n          console.error('Errore durante la copia negli appunti:', err);\n          alert('Impossibile copiare il report. Controlla le autorizzazioni del browser.');\n        });\n    } catch (error) {\n      console.error('Errore nella formattazione del testo:', error);\n    }\n  };\n  \n  // Funzione per condividere il report sui social\n  const shareReportOnSocial = () => {\n    // Crea un titolo per la condivisione\n    const title = `Analisi Performance Studio Pumaisdue - ${currentYear}`;\n    \n    // Testo breve per la condivisione\n    const summary = `Analisi delle performance dello Studio Pumaisdue per l'anno ${currentYear}. Dati aggiornati al ${getMonthName(currentMonth)}.`;\n    \n    // Usa l'API Web Share se disponibile\n    if (navigator.share) {\n      navigator.share({\n        title: title,\n        text: summary,\n        // Nota: non includiamo una URL perché questo è un'app locale\n      })\n      .then(() => console.log('Condivisione completata'))\n      .catch((error) => console.error('Errore durante la condivisione:', error));\n    } else {\n      // Fallback per browser che non supportano Web Share API\n      const socialText = `${title}\\n\\n${summary}\\n\\nDati analizzati con StudioStats.`;\n      \n      // Apre una finestra di dialogo per copiare il testo\n      const result = window.confirm(\n        'La condivisione diretta non è supportata in questo browser. ' +\n        'Vuoi copiare il testo per condividerlo manualmente?'\n      );\n      \n      if (result) {\n        navigator.clipboard.writeText(socialText)\n          .then(() => alert('Testo copiato negli appunti! Ora puoi incollarlo sul social che preferisci.'))\n          .catch(err => console.error('Errore durante la copia:', err));\n      }\n    }\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <BackRow>\n          <BackButton onClick={() => setView('main')}>\n            ← Torna alla dashboard\n          </BackButton>\n          <ShareButton onClick={handleShare}>\n            <Share2 size={18} /> Condividi\n          </ShareButton>\n        </BackRow>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              {availableYears.map((year, index) => {\n                const isCurrentYear = year === currentYear;\n                if (isCurrentYear) {\n                  return (\n                    <React.Fragment key={year}>\n                      <Line\n                        type=\"monotone\"\n                        dataKey={(dataPoint) => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year]}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        dot={false}\n                        connectNulls={true}\n                      />\n                      <Line\n                        type=\"monotone\"\n                        dataKey={(dataPoint) => {\n                          if (dataPoint[`${year}IsPrediction`]) {\n                            return dataPoint[year];\n                          }\n                          const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                          return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                        }}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        strokeDasharray=\"5 5\"\n                        dot={false}\n                        connectNulls={true}\n                      />\n                    </React.Fragment>\n                  );\n                } else {\n                  return (\n                    <Line\n                      key={year}\n                      type=\"monotone\"\n                      dataKey={year.toString()}\n                      stroke={colorPalette[index]}\n                      strokeWidth={1}\n                      dot={false}\n                    />\n                  );\n                }\n              })}\n            </LineChart>\n          </ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Considerazioni sull'anno in corso (AI)</AnalysisTitle>\n          \n          {aiAnalysis ? (\n            <div>\n              <MarkdownContent>\n                <ReactMarkdown>\n                  {aiAnalysis}\n                </ReactMarkdown>\n              </MarkdownContent>\n              \n              <div style={{ display: 'flex', gap: '12px', marginTop: '16px', flexWrap: 'wrap' }}>\n                <Button \n                  onClick={() => generateAIAnalysis(true)} \n                  disabled={isGeneratingAnalysis}\n                >\n                  {isGeneratingAnalysis ? (\n                    <>\n                      <LoadingSpinner /> Rigenerazione in corso...\n                    </>\n                  ) : (\n                    <>\n                      <RefreshCw size={18} /> Forza aggiornamento\n                    </>\n                  )}\n                </Button>\n                \n                <Button \n                  onClick={copyReportToClipboard}\n                  disabled={isGeneratingAnalysis}\n                  style={{ backgroundColor: '#4CAF50' }}\n                >\n                  <Copy size={18} /> Copia report\n                </Button>\n                \n                <Button \n                  onClick={shareReportOnSocial}\n                  disabled={isGeneratingAnalysis}\n                  style={{ backgroundColor: '#2196F3' }}\n                >\n                  <ExternalLink size={18} /> Condividi report\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div>\n              <p>Genera un'analisi dettagliata sull'anno in corso utilizzando l'intelligenza artificiale.</p>\n              <p>Questa funzionalità utilizza l'API Gemini per analizzare i dati e fornire insight approfonditi.</p>\n              \n              <div style={{\n                backgroundColor: '#F0F9FF',\n                border: '1px solid #0EA5E9',\n                borderRadius: '8px',\n                padding: '12px',\n                margin: '16px 0',\n                fontSize: '14px',\n                color: '#0369A1'\n              }}>\n                <strong>💡 Sistema migliorato:</strong>\n                <ul style={{ margin: '8px 0', paddingLeft: '16px' }}>\n                  <li>Retry automatico con backoff esponenziale in caso di rate limits</li>\n                  <li>Cache intelligente per ridurre le chiamate API</li>\n                  <li>Gestione migliorata degli errori con messaggi più specifici</li>\n                  <li>Timeout ottimizzato per evitare attese eccessive</li>\n                </ul>\n                \n                <div style={{ marginTop: '12px', borderTop: '1px solid #BAE6FD', paddingTop: '12px' }}>\n                  <button\n                    onClick={() => setShowDiagnostics(!showDiagnostics)}\n                    style={{\n                      background: 'none',\n                      border: 'none',\n                      color: '#0369A1',\n                      cursor: 'pointer',\n                      fontSize: '13px',\n                      textDecoration: 'underline'\n                    }}\n                  >\n                    {showDiagnostics ? '🔧 Nascondi diagnostica' : '🔧 Mostra strumenti diagnostica'}\n                  </button>\n                  \n                  {showDiagnostics && (\n                    <div style={{ marginTop: '12px' }}>\n                      <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>\n                        <button\n                          onClick={testApiConnection}\n                          style={{\n                            backgroundColor: '#059669',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '4px',\n                            padding: '6px 12px',\n                            fontSize: '12px',\n                            cursor: 'pointer'\n                          }}\n                        >\n                          Test API\n                        </button>\n                        <button\n                          onClick={clearCache}\n                          style={{\n                            backgroundColor: '#DC2626',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '4px',\n                            padding: '6px 12px',\n                            fontSize: '12px',\n                            cursor: 'pointer'\n                          }}\n                        >\n                          Pulisci Cache\n                        </button>\n                        <button\n                          onClick={() => {\n                            const stats = getCacheStats();\n                            if (stats) {\n                              const oldestDate = stats.oldestItem ? new Date(stats.oldestItem).toLocaleDateString('it-IT') : 'N/A';\n                              const newestDate = stats.newestItem ? new Date(stats.newestItem).toLocaleDateString('it-IT') : 'N/A';\n                              alert(`Statistiche Cache:\\n\\nTotale elementi: ${stats.totalItems}\\nAnalisi reali: ${stats.realAnalysis}\\nAnalisi simulate: ${stats.simulatedAnalysis}\\nDimensione totale: ${Math.round(stats.totalSize / 1024)} KB\\nPiù vecchia: ${oldestDate}\\nPiù recente: ${newestDate}`);\n                            } else {\n                              alert(\"Errore nel recupero delle statistiche cache\");\n                            }\n                          }}\n                          style={{\n                            backgroundColor: '#7C3AED',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '4px',\n                            padding: '6px 12px',\n                            fontSize: '12px',\n                            cursor: 'pointer'\n                          }}\n                        >\n                          Info Cache\n                        </button>\n                      </div>\n                      <p style={{ fontSize: '11px', margin: '8px 0 0 0', color: '#64748B' }}>\n                        Usa questi strumenti per diagnosticare problemi con l'API Gemini\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <Button \n                onClick={() => generateAIAnalysis(false)} \n                disabled={isGeneratingAnalysis}\n              >\n                {isGeneratingAnalysis ? (\n                  <>\n                    <LoadingSpinner /> Generazione in corso...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw size={18} /> Genera analisi AI\n                  </>\n                )}\n              </Button>\n            </div>\n          )}\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <ButtonContainer>\n          <Button onClick={() => setView('main')}>Torna alla Dashboard</Button>\n          <Button onClick={handleShare}>\n            <Share2 size={20} />\n            Condividi\n          </Button>\n        </ButtonContainer>\n      </ViewContent>\n      \n      {/* Footer */}\n      <div style={{\n        textAlign: 'center',\n        marginTop: '30px',\n        paddingTop: '20px',\n        borderTop: '1px solid #e5e7eb',\n        fontSize: '14px',\n        color: '#6b7280',\n      }}>\n        <p>© StudioStats 2025 Marco Augusto Comba | Versione 1.6.1</p>\n      </div>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"names":["GEMINI_API_KEY","process","REACT_APP_GEMINI_API_KEY","getGeminiRequestConfig","prompt","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","ViewContainer","styled","div","ViewContent","BackRow","BackButton","button","ShareButton","ViewTitle","h1","ChartContainer","AnalysisSection","AnalysisTitle","h2","AnalysisText","LegendContainer","LegendItem","LegendColor","props","color","ButtonContainer","Button","LoadingSpinner","MarkdownContent","getMonthName","monthNumber","formatNumber","num","Intl","NumberFormat","format","Math","round","delay","ms","Promise","resolve","setTimeout","fetchGeminiAnalysis","async","_lastError","lastError","maxRetries","arguments","length","undefined","attempt","requestConfig","axios","post","timeout","headers","data","candidates","content","error","console","response","_error$response$data$","status","retryDelay","pow","random","log","message","code","includes","generateSimulatedAnalysis","yearToAnalyze","currentMonth","totalTurni","averageMonthlyTurni","month","currentDate","Date","date","toLocaleDateString","year","day","toFixed","cleanOldCache","keysToRemove","i","localStorage","key","startsWith","cachedData","getItem","parsedData","JSON","parse","now","timestamp","push","forEach","removeItem","saveAnalysisToCache","analysis","isRealAnalysis","cacheKey","cacheData","version","setItem","stringify","name","retryError","_ref","setView","allYearsData","setAllYearsData","useState","yearAnalysis","setYearAnalysis","prediction","setPrediction","aiAnalysis","setAiAnalysis","isGeneratingAnalysis","setIsGeneratingAnalysis","showDiagnostics","setShowDiagnostics","availableYears","useMemo","getAvailableYears","map","y","parseInt","value","colorPalette","numColors","hueStep","Array","from","_","generateColorPalette","currentYear","getCurrentYearAndMonth","generateYearAnalysis","useCallback","yearData","currentYearData","Object","values","slice","reduce","sum","monthData","totaleTurni","monthsWithData","filter","previousYearsData","entries","_ref2","_ref3","yearTotal","avgPreviousYears","percentageDiff","abs","monthlyTurni","m","quarterlyAverages","q","a","b","quarters","avg","index","percentDiff","allYearsTotals","_ref4","sort","currentYearRank","findIndex","totalYears","makePrediction","futurePredictions","totalEffectiveTurni","totalPredictedTurni","yearsCount","averageTurni","totalComplessivo","productivityRanking","yearTotalTurni","join","item","formatChartData","chartData","calculateAverageForMonth","relevantYears","acc","generateAIAnalysis","forceUpdate","cachedAnalysis","getAnalysisFromCache","cachedTime","_ref5","historicalMonthlyAverages","allMonthsHistoricalData","monthIndex","totalTurniForMonth","yearsWithDataForMonth","_ref6","averageForMonth","monthName","mediaStorica","anniConDati","currentYearMonthlyWithComparison","currentMonthTurni","historicalAverage","percentageChange","performanceDescription","turniAttuali","variazione","performance","historicalSummary","_ref7","note","currentYearTotal","formatDate","simulatedAnalysis","defaultYearToAnalyze","useEffect","allData","getYearlyData","futurePrediction","fetchData","handleShare","shareText","navigator","share","title","catch","alert","_jsxs","children","_jsx","onClick","Share2","size","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","React","Line","type","dataPoint","stroke","strokeWidth","dot","connectNulls","lastRealMonth","d","toString","ReactMarkdown","style","display","gap","marginTop","flexWrap","disabled","_Fragment","RefreshCw","copyReportToClipboard","plainText","replace","clipboard","writeText","then","err","backgroundColor","Copy","shareReportOnSocial","summary","socialText","window","confirm","ExternalLink","border","borderRadius","padding","margin","fontSize","paddingLeft","borderTop","paddingTop","background","cursor","textDecoration","testPrompt","clearCache","stats","getCacheStats","totalItems","realAnalysis","totalSize","oldestItem","newestItem","oldestDate","newestDate","textAlign"],"sourceRoot":""}